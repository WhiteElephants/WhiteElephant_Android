package com.gordon.rawe.business.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.gordon.rawe.business.models.DeliveryInformation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DELIVERY_INFORMATION".
*/
public class DeliveryInformationDao extends AbstractDao<DeliveryInformation, Long> {

    public static final String TABLENAME = "DELIVERY_INFORMATION";

    /**
     * Properties of entity DeliveryInformation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Province = new Property(1, String.class, "province", false, "PROVINCE");
        public final static Property City = new Property(2, String.class, "city", false, "CITY");
        public final static Property Street = new Property(3, String.class, "street", false, "STREET");
        public final static Property Detail = new Property(4, String.class, "detail", false, "DETAIL");
        public final static Property Zip = new Property(5, String.class, "zip", false, "ZIP");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
    };


    public DeliveryInformationDao(DaoConfig config) {
        super(config);
    }
    
    public DeliveryInformationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DELIVERY_INFORMATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PROVINCE\" TEXT," + // 1: province
                "\"CITY\" TEXT," + // 2: city
                "\"STREET\" TEXT," + // 3: street
                "\"DETAIL\" TEXT," + // 4: detail
                "\"ZIP\" TEXT," + // 5: zip
                "\"PHONE\" TEXT);"); // 6: phone
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DELIVERY_INFORMATION\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DeliveryInformation entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(2, province);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(3, city);
        }
 
        String street = entity.getStreet();
        if (street != null) {
            stmt.bindString(4, street);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(5, detail);
        }
 
        String zip = entity.getZip();
        if (zip != null) {
            stmt.bindString(6, zip);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DeliveryInformation readEntity(Cursor cursor, int offset) {
        DeliveryInformation entity = new DeliveryInformation( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // province
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // city
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // street
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // detail
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // zip
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // phone
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DeliveryInformation entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setProvince(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCity(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStreet(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDetail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setZip(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DeliveryInformation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DeliveryInformation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
